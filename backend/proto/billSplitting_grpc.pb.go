// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/billSplitting.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillSplittingClient is the client API for BillSplitting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillSplittingClient interface {
	CreateExpenseSummaryChart(ctx context.Context, in *CreateExpenseSummaryChartRequest, opts ...grpc.CallOption) (*CreateExpenseSummaryChartResponse, error)
	GetAuthToken(ctx context.Context, in *GetAuthTokenRequest, opts ...grpc.CallOption) (*GetAuthTokenResponse, error)
}

type billSplittingClient struct {
	cc grpc.ClientConnInterface
}

func NewBillSplittingClient(cc grpc.ClientConnInterface) BillSplittingClient {
	return &billSplittingClient{cc}
}

func (c *billSplittingClient) CreateExpenseSummaryChart(ctx context.Context, in *CreateExpenseSummaryChartRequest, opts ...grpc.CallOption) (*CreateExpenseSummaryChartResponse, error) {
	out := new(CreateExpenseSummaryChartResponse)
	err := c.cc.Invoke(ctx, "/proto.BillSplitting/CreateExpenseSummaryChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billSplittingClient) GetAuthToken(ctx context.Context, in *GetAuthTokenRequest, opts ...grpc.CallOption) (*GetAuthTokenResponse, error) {
	out := new(GetAuthTokenResponse)
	err := c.cc.Invoke(ctx, "/proto.BillSplitting/GetAuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillSplittingServer is the server API for BillSplitting service.
// All implementations must embed UnimplementedBillSplittingServer
// for forward compatibility
type BillSplittingServer interface {
	CreateExpenseSummaryChart(context.Context, *CreateExpenseSummaryChartRequest) (*CreateExpenseSummaryChartResponse, error)
	GetAuthToken(context.Context, *GetAuthTokenRequest) (*GetAuthTokenResponse, error)
	mustEmbedUnimplementedBillSplittingServer()
}

// UnimplementedBillSplittingServer must be embedded to have forward compatible implementations.
type UnimplementedBillSplittingServer struct {
}

func (UnimplementedBillSplittingServer) CreateExpenseSummaryChart(context.Context, *CreateExpenseSummaryChartRequest) (*CreateExpenseSummaryChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExpenseSummaryChart not implemented")
}
func (UnimplementedBillSplittingServer) GetAuthToken(context.Context, *GetAuthTokenRequest) (*GetAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthToken not implemented")
}
func (UnimplementedBillSplittingServer) mustEmbedUnimplementedBillSplittingServer() {}

// UnsafeBillSplittingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillSplittingServer will
// result in compilation errors.
type UnsafeBillSplittingServer interface {
	mustEmbedUnimplementedBillSplittingServer()
}

func RegisterBillSplittingServer(s grpc.ServiceRegistrar, srv BillSplittingServer) {
	s.RegisterService(&BillSplitting_ServiceDesc, srv)
}

func _BillSplitting_CreateExpenseSummaryChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExpenseSummaryChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillSplittingServer).CreateExpenseSummaryChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillSplitting/CreateExpenseSummaryChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillSplittingServer).CreateExpenseSummaryChart(ctx, req.(*CreateExpenseSummaryChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillSplitting_GetAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillSplittingServer).GetAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillSplitting/GetAuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillSplittingServer).GetAuthToken(ctx, req.(*GetAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillSplitting_ServiceDesc is the grpc.ServiceDesc for BillSplitting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillSplitting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillSplitting",
	HandlerType: (*BillSplittingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExpenseSummaryChart",
			Handler:    _BillSplitting_CreateExpenseSummaryChart_Handler,
		},
		{
			MethodName: "GetAuthToken",
			Handler:    _BillSplitting_GetAuthToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/billSplitting.proto",
}
