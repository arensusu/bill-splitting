// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: groups.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (name)
VALUES ($1)
RETURNING id, name, created_at
`

func (q *Queries) CreateGroup(ctx context.Context, name string) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, name)
	var i Group
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, name, created_at
FROM groups
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listGroups = `-- name: ListGroups :many
SELECT id, name
FROM groups, (SELECT group_id FROM group_members WHERE user_id = $1) AS group_members
WHERE groups.id = group_members.group_id
`

type ListGroupsRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ListGroups(ctx context.Context, userID string) ([]ListGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, listGroups, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListGroupsRow{}
	for rows.Next() {
		var i ListGroupsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE groups
SET name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateGroupParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, updateGroup, arg.ID, arg.Name)
	var i Group
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
