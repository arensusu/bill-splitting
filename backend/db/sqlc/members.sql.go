// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: members.sql

package db

import (
	"context"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (group_id, user_id)
VALUES ($1, $2)
RETURNING id, group_id, user_id
`

type CreateMemberParams struct {
	GroupID int32  `json:"group_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember, arg.GroupID, arg.UserID)
	var i Member
	err := row.Scan(&i.ID, &i.GroupID, &i.UserID)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM members
WHERE group_id = $1 AND user_id = $2
`

type DeleteMemberParams struct {
	GroupID int32  `json:"group_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) DeleteMember(ctx context.Context, arg DeleteMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteMember, arg.GroupID, arg.UserID)
	return err
}

const getMember = `-- name: GetMember :one
SELECT id, group_id, user_id
FROM members
WHERE id = $1
`

func (q *Queries) GetMember(ctx context.Context, id int32) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, id)
	var i Member
	err := row.Scan(&i.ID, &i.GroupID, &i.UserID)
	return i, err
}

const getMembership = `-- name: GetMembership :one
SELECT id, group_id, user_id
FROM members
WHERE group_id = $1 AND user_id = $2
`

type GetMembershipParams struct {
	GroupID int32  `json:"group_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) GetMembership(ctx context.Context, arg GetMembershipParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMembership, arg.GroupID, arg.UserID)
	var i Member
	err := row.Scan(&i.ID, &i.GroupID, &i.UserID)
	return i, err
}

const listMembersOfGroup = `-- name: ListMembersOfGroup :many
SELECT members.id as id, username
FROM (SELECT id, group_id, user_id FROM members WHERE group_id = $1) AS members, users
WHERE members.user_id = users.id
`

type ListMembersOfGroupRow struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) ListMembersOfGroup(ctx context.Context, groupID int32) ([]ListMembersOfGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, listMembersOfGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMembersOfGroupRow{}
	for rows.Next() {
		var i ListMembersOfGroupRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
