// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: group_members.sql

package db

import (
	"context"
)

const createGroupMember = `-- name: CreateGroupMember :one
INSERT INTO group_members (group_id, user_id)
VALUES ($1, $2)
RETURNING group_id, user_id, created_at
`

type CreateGroupMemberParams struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) CreateGroupMember(ctx context.Context, arg CreateGroupMemberParams) (GroupMember, error) {
	row := q.db.QueryRowContext(ctx, createGroupMember, arg.GroupID, arg.UserID)
	var i GroupMember
	err := row.Scan(&i.GroupID, &i.UserID, &i.CreatedAt)
	return i, err
}

const deleteGroupMember = `-- name: DeleteGroupMember :exec
DELETE FROM group_members
WHERE group_id = $1 AND user_id = $2
`

type DeleteGroupMemberParams struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) DeleteGroupMember(ctx context.Context, arg DeleteGroupMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteGroupMember, arg.GroupID, arg.UserID)
	return err
}

const getGroupMember = `-- name: GetGroupMember :one
SELECT group_id, user_id, created_at
FROM group_members
WHERE group_id = $1 AND user_id = $2
`

type GetGroupMemberParams struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) GetGroupMember(ctx context.Context, arg GetGroupMemberParams) (GroupMember, error) {
	row := q.db.QueryRowContext(ctx, getGroupMember, arg.GroupID, arg.UserID)
	var i GroupMember
	err := row.Scan(&i.GroupID, &i.UserID, &i.CreatedAt)
	return i, err
}

const listGroupMembers = `-- name: ListGroupMembers :many
SELECT group_id, user_id, created_at
FROM group_members
WHERE group_id = $1
`

func (q *Queries) ListGroupMembers(ctx context.Context, groupID int64) ([]GroupMember, error) {
	rows, err := q.db.QueryContext(ctx, listGroupMembers, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupMember
	for rows.Next() {
		var i GroupMember
		if err := rows.Scan(&i.GroupID, &i.UserID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
